基本文法
	・ファイル構成
		・パッケージ（全小文字ファイル名）の中にクラス（アッパーキャメルケース）
	・コメント
		①//	コメント
		②/*
			ここにコメント
		 */
		③
	
	・Javaでは変数を使う際に、データ型を宣言する。
		long		整数（64ビット） -9223372036854775808 〜 9223372036854775807
		int			整数（32ビット） -2147483648 〜 2147483647
		short		整数（16ビット） -32768 〜 32767
		byte		整数（8ビット）  -128 〜 127
		double		小数（64ビット）
		float		小数（32ビット）
		boolean		真偽（trueもしくはfalse）
		char		1文字
		String		文字列（頭が大文字）
		
		・定められたデータのサイズを超えたり、データ型の宣言をしないとエラーが出る。
			int number = 11111;
		・charは１文字、Stringは複数文字可能。charはシングルクォーテーョン、Stringはダブルクォーテーョンで囲んで使う。
			char letter ='あ';
			String text = "ああああ";
	
	・変数名の付け方
		・ローワーキャメルケース、予約後は使用不可
		・予約語の例	abstract,case,do,new,int,short,boolean,this
			short shortNumber = 111;
			
	・配列の宣言の仕方
		・[]を使って宣言する。下記のどちらでもよい。3は要素数
			String[] hairetsu = new String[3];
			String hairetsu2[] = new String[3];
			
		・配列を宣言するときには、配列のサイズを指定し、初期化する（固定長配列）
		・可変長配列の後ほど
		
			hairetsu[0] = "りんご";
			hairetsu[1] = "みかん";
			hairetsu[2] = "ぶどう";
		
		・最初から配列の変数に値を入れて宣言することもできる。この場合は要素数を指定する必要なし
			int[] hairetsu3 = {5, 4, 3, 2};
			System.out.println(hairetsu3);
			
		・配列のサイズを取得したい場合はlengthを使う
			System.out.println("配列のサイズ:" + hairetsu3.length);
			
	・データが型には「基本型（プリミティブ型）」と「参照型」の２種類がある。
		「基本型」は先頭が小文字で、変数の中に値を直接保持している。
		「基本型」は上記のString以外の8つだけ。
		「参照型」は先頭が大文字で、変数はデータが実際に存在してるパソコン上の場所を参照しているだけで、
		 値を直接的に保持しているわけではない。
		「参照型」は、StringやIntegerといったものや、配列などが当てはまる。
		「参照型」だと変数の中にnullを入れられたり、メソッドを呼び出したりできる。
		 例えば、Integerはintと同様に整数を格納できるデータ型(32ビット)だが、intと違ってnullをいれることができる。
		
	・String text2 = "Javaの学習中です";
		System.out.println("text2の６文字目：" + text2.charAt(5));
		System.out.println("text2の６文字目から８文字目の切り出し:" + text2.substring(5,7));
		System.out.println("text2の文字列の文字数を取得：" + text2.length());
		System.out.println("text2に「Java」という文字が含まれるか検索:" + text2.contains("Java"));
		System.out.println("text2に「PHP」という文字が含まれるか検索：" + text2.contains("PHP"));
		
	・定数の作り方　先頭にfinalというキーワードを付与する
		・命名規則「すべて大文字」、「複数文字の場合は区切りにアンダースコア」
		・final String GREETING_MSG = "こんにちわ！";
		
	・比較演算子と論理演算子
		・基本的にphpと同じ
			System.out.println("1 == 1:" + (1 == 1));	// true
			System.out.println("1 != 1:" + (1 != 1));	// false
			System.out.println("2 > 1:" + (2 > 1));	// true
		・定義　int i = 1;
		・インクリメント　i++;
		・i += 3;
			System.out.println("i:" + i);	// 5
		・文字列の結合はjsと同じく「+」を使う
			String str1 = "Java";
			String str2 = "勉強中";
			System.out.println(str1 + str2);
			
		・演算子で文字列結合することも可能
			str1 += str2;
		
		・文字列を数値に変換する	Integer.parseInt()
		・数値を文字列に変換する	String.valueOf()
		・Stringなどの参照型は「==」ではなく「.equals」を使う
			・文字列を定義しただけのString型は==で比較可能
				String text1 = "Java";
				String text2 = "Java";
				if(text1 == text2){
					System.out.println("text1とtext2とは等しい") ; // こっちがはしる！
				}else {
					System.out.println("text1とtext2とは違う");
				}
			・文字列を追加すると==で比較できなくなる！
				text1 += "の勉強中です！";
				text2 += "の勉強中です！";
				if(text1 == text2){
					System.out.println("text1とtext2とは等しい"); 
				}else {
					System.out.println("text1とtext2とは違う"); // こんどはこっち！
				}
			・.equalsを使うと比較可能
				if(text1.equals(text2)){
					System.out.println("text1とtext2とは等しい"); // こっちになる！
				}else {
					System.out.println("text1とtext2とは違う"); 
				}
				
		・phpでは、値そのものを使って、真か偽かを判定して条件分岐をすることができたが、
		　Javaではできない。boolean値のみ、そのまま使える。
			・真偽値の頭に「!」をつけると、中身が反転する
				boolean b = true;
				if(!b) {
					System.out.println("bは偽です");
				} else {
					System.out.println("bは真です"); //　こっち
				
	・if文
		・elseとifの間には半角スペースが必要
		・３項演算子が使える
		
	・switch文もPHPと同様に使用可能
		
	・for文もほぼPHPと同様に使用可能
		・breakをつかうとそこで　for文の処理が終了
		・continueをつかうと後続の処理をスキップしてfor文を継続
		
	・拡張for文(foreachのようなもの)
		for(String fruit : fruits) {
			System.out.println(fruit);
		}
		
	・while文もPHP同様
	
	・関数
		・クラスには様々な関数（メソッド）や変数を使うことができる。
		　メソッドは下記のように書く		
			修飾子 戻り値の型 メソッド名(引数) {
			  命令文;
			  return　式；
			}
		・引数が不要な場合は省略可能。
		・修飾子には、「アクセス修飾子」といった
			・public → すべてのクラスからアクセスできる
			・protected → 現在のクラスとサブクラス（子クラス）からアクセスできる
			・private → 現在のクラスからだけアクセスできる
			・つけない場合 → 現在のクラスと同じパッケージのクラスからアクセスできる）
		　であったり、他にも、「static修飾子」、「final修飾子」といったものも存在するが、ここではすべて覚えなくても大丈夫。
		
		・引数の数やデータ型が違えば、同じメソッド名で複数のメソッドを定義できる。→オーバーロードという
		・戻り値がない場合は、void型を使う
		・クラス内に直接定義した変数	メンバ変数（フィールド変数）
		・メソッド内で飲み使われる変数	ローカル変数
		
	・ライブラリ
		・標準クラスライブラリ	Javaがもともと用意してくれているライブラリ
			・可変長配列を扱うList
				・クラスファイルの定義前にimportする（クラス名をクリックし、command+shift+oでimportを生成できる）
					・import java.util.List;
					・import java.util.ArrayList;
				・使い方
					・List<String> strList = new ArrayList<String>();
					・List<String> strList = new ArrayList<>();	ダイヤモンド演算子で省略可能
				・要素の追加
					・strList.add("java");
				・拡張for文で使用する
					・for(String s: strList){
						System.out.println(s);
					}
				・要素の削除
					・strList.remove(1);
		・外部ライブラリ
			// 「外部ライブラリ」を使う場合は、jarファイルという、javaのソースコードをまとめたファイルをまず取得して、
			// そのファイルを置いた場所を「ビルドパス」として設定してあげる必要がある（どこのjarをおいているのかプログラム側に教えてあげる必要がある）
			// 今回は、文字列の操作等をシンプルに行うことができる「StringUtils」というライブラリを実際に使ってみる
			// 下記のURLにアクセスして、zipファイルをダウンロードして解凍すると、「commons-lang3-3.9.jar」というjarファイルが取得できる
			// （参照サイト）http://commons.apache.org/proper/commons-lang/download_lang.cgi
			// jarファイルを置く場所は基本的にどこでも問題ないが、プロジェクトで使うjarファイルはプロジェクト内に配置したほうが管理しやすい。
			// プロジェクト名を右クリックして「新規 > フォルダ」を選択し、「lib」という名前のフォルダを作成して、そこにjarファイルをドラッグ&ドロップでコピーして配置してみましょう。
			// jarファイルをクリックして「ビルドパス > ビルドパスに追加」として設定してあげましょう。
			// 下記のように、StringUtilsと書いた上で、Command + Shift + OとするとEclipseが自動的にimport文を書いてくれる。
			
			・nullや空文字を判別してくれるStringUtils.isEmpty()メソッド
				・System.out.println("StringUtils.isEmpty()を使った、空文字の判定結果：" + StringUtils.isEmpty(str1));	// true
				
			・文字列の中身がアルファベットかどうか判定
				・StringUtils.isAlpha(str1);
			
			・文字列の中身が数値かどうか判定
				・StringUtils.isNumeric(str1);
		
		・オリジナルクラス
			// クラスの使い方について
			// 「自分で作った他のクラスファイル」の読み込み
			// パッケージ名やクラス名を指定して、importしてあげれば良い。
			// 前回のレッスンで使ったSampleClass06を読み込むためには、
			// import javasample06.SampleClass06;とする
			// そうするとSampleClass06が呼び出せる状態になるので、そのクラスを実際に使うために「new」演算子を使ってインスタンス化する（この辺りは後ほど説明していきます）
				クラス 変数 = new クラス();
				SampleClass06 sc6 = new SampleClass06();
			// SampleClass06のmainメソッドを呼び出してみる。
			// 呼び出しの時は、Stringの配列を引数で渡さないといけないので、空の配列を作って渡す。
				String[] str = {};
				sc6.main(str);
				
	・サーブレット
		・tomcat
			・環境構築	HP→Download→Tomcat9→Coreのzipファイル→解凍したものをEclipse直下のContentsフォルダと同階層に置く
			・EclipseでTomcatを使えるようにする ウィンドウ→ビューの表示→サーバー→サーバータイプ「Tomcat9サーバー」→「追加」
			  →「Tomcatインストールディレクトリー」で先ほどDLしたファイルを設定する。
			 
			・動的WEBプロジェクトを作成
				・パッケージエクスプローラーの空白部分で右クリックして「新規」→「その他」
				・検索窓に「動的」と入力して「動的WEBプロジェクト」を選択
				・今回つけたいプロジェクト名（アッパーキャメルケース）を入力して完了ボタン
			・サーブレットクラスを作成
				・プロジェクト名を右クリックして、「新規」→「その他」
				・検索窓に「サーブレット」と入力して「サーブレット」を選択
				・「Javaパッケージ名」にパッケージ名（全小文字）を、「クラス名」にクラス名を入力して完了ボタン
				・プロジェクトのsrcの下にパッケージやサーブレットクラスが生成されている。
			・ビルドパスを通す（初めから通ってるっぽいから不要）
				・プロジェクト名を右クリックして、「ビルドパス」→「ビルドパスの構成」を選択
				・「ライブラリー」タブの中の「クラスパス」を選択した状態で、「右側のライブラリの追加」を選択
				・どんなライブラリを追加するのか聞かれるため、「サーバー・ランタイム」を選択
				・「Tomcat9」を選択して完了
			・Tomcatのサーバーでアプリを動かせるように設定
				・Eclipse下部のサーバータブを開いて、Tomcat9を右クリックして「追加及び除去」を選択
				・先ほど作ったプロジェクトを選択し、ダイアログ中央の追加ボタンをクリック
			・ブラウザからアクセス
				・http://<サーバー名>/<プロジェクト名>/<URLパターン>
					・サーバー名　localhost:8080
					・URLパターン サーブレットクラスに書いてある@WebServletの後ろの部分
					
		・JDBC	データベースにアクセスするためのツール
			MySQLのJDBCは下記のサイト
				https://dev.mysql.com/downloads/connector/j/
			動的Webプロジェクトの場合は、WebContent/WEB-INF/libの下にjarファイルを置くと、
			自動的にビルドパスを設定してくれるので今回はそこに配置する
	
	・JSP（Java Server Page）
		サーブレット同様にサーバーサイドでプログラムを実行する技術で、HTMLの中にJavaコードを埋め込むような書き方
		HTML出力を楽に行えるようになる。
		サーブレットクラスを使うのではなく、JSPファイルを作成して使っていく
		画面表示部分はJSPが適していて、DB接続などバックエンド部分はサーブレットで作成するのが適している。
		jSPはブラウザからリクエストされるとサーブレットクラスに変換されるので、サーブレットクラスでできることはJSPファイルでできる
		
		・JSPファイルの作成方法
			・プロジェクト名を右クリックし、「新規」→「その他」→「JSPファイル」
			・ファイルの配置先は「WebContent」というフォルダの下にJSPファイルを作成
			・ファイルの命名規則は特になく、現場に合わせる
			・URLはサーバー名/プロジェクト名/ファイル名.jspでアクセスできる
		
		・スクリプトレット　<% %>で囲った範囲にjavaの処理を記述する
			・out.println()を使うと、html上に出力される
			
		・ページ＆インポートディレクティブ	<%@ %>で囲った範囲に、JSPファイルの設定などを書き込む　文字コードやimportとか。
		
		・HTMLとしてのコメント　<!-- --!> ブラウザに渡すHTMLファイルに出力される
		・JSPとしてのコメント　 <%-- --%> ブラウザに渡すHTMLファイルに出力されない
		
		・<%= =%>で値の出力が可能　（out.printlnが不要になる）
		
		・DAOクラス(Data Access Object　Javaでのデータベースへの接続を記載しておくもの)
		・DTOクラス(Data Transfer Object データなどの様々な値を転送するための格納庫のようなもの)
		
		・アクションタグ　JSP内でよく使用する処理をタグ形式で記述
			・例　includeディレクティブ　<%@ include file="/WEB-INF/jsp/head13.jsp" %>
				 アクションタグ			<jsp:include file="/WEB-INF/jsp/head13.jsp" />
				 
			・Javaが提供する「標準アクションタグ」と開発者がアクションタグを作り、配布している「カスタムタグ」がある。
				・有名なカスタムタグをまとめたものを「JSTL」という
			
			・JSTLの使い方
				1. 	jarファイルのDL https://tomcat.apache.org/download-taglibs.cgi
					・taglibs-standard-impl-1.2.5.jar
					・taglibs-standard-spec-1.2.5.jar
					・taglibs-standard-jstlel-1.2.5.jar
				2. 	WEB-INF/libディレクトリへ上記ファイルの配置（自動でビルドパスが通る）
				3.	jspファイル上部へ下記の記述
						<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
						<%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt" %>
				4.	<c:forEach var="diary" items="${diary}">などと記載して使う
		
		・EL式	スコープに保存されている値を簡単にJSP上で出力
			・${属性名}とすると、その属性名に格納されている値を表示できる。
			・${属性名.プロパティ}とすれば、属性名の中プロパティにアクセスできる（getterが自動的に行われる）
		
・EclipseでSpring Bootを使う
	・導入方法
		1. EclipseマーケットプレイスでSpringToolsをインストール
		2. パッケージエクスプローラの空白部分で右クリック→新規→その他
		3. 検索バーにspringを入力し、新規Springスタータープロジェクトを選択
		4. 名前とパッケージを任意入力し、次へ
		5. 依存関係で、web→Spring Webを選択し、完了
	・特徴
		・アノテーションを多用。@RestControllerなど。
		・DI（Dependency Injection）を使える　→ 他のクラスを呼び出す際に「new」と書かなくても使える
		・DIを活用すると単体テストが効率的
	・JDBCの使い方
		・pom.xmlファイル内のdependencies欄にhttps://mvnrepository.com/artifact/mysql/mysql-connector-javaなどの
		サイトから記述を引っ張ってきてコピペすると、Maven依存関係に自動で追加される。
		
・スッキリわかるJava入門
	・Java API 
		・代表的なもの
			java.lang	重要クラス群。これだけ特別にimport文が不要で呼び出し可能
			java.util	便利なクラス
			java.math	数学に関するもの
			java.net	ネットワーク通信にか関わるもの
			java.io		ファイル読み書きなどデータを逐次処理するためのもの
			
	・命名規則
		・パッケージ名						ドメイン名を逆順にしたもの	  com.example.foo
		・ソースファイル名				 　　 クラス名.java				 Hero.java
		・クラス名							単語の頭が大文字			Hero,MonsterInfo
		・フィールド名(Java特有の変数のこと)　	最初以外の単語の頭が大文字    Level,itemList
		・メソッド名						最初以外の単語の頭が大文字	  attack, findWeakPoint
		
	・クラス型と参照
		・クラス型変数にはインスタンスの情報が格納されたメモリの番地が入っている
		・クラス型はフィールドやメソッドの引数・戻り値の型としても利用できる
		
	・コンストラクタ
		・「クラス名と同一名称で、戻り値の型が明記されていないメソッド」はコンストラクタ
			public class Human{
				Human(){
					// コンストラクタ
				}
			}
		・引数を持つコンストラクタを定義するとnewをする際に引数を指定することができる
		・コンストラクタは引数の数を変えて複数定義できる
		・クラスにコンストラクタが１つもない場合に限って、コンパイラが「引数なし、処理内容なし」のデフォルトコンストラクタを自動定義
		・this()を用いて同一クラスのコンストラクタを呼び出し可能
			public Human {
				Human(String name, int age){
					this.name = name;
					this.age =  age;
				}
				Human(int age) {
					this(String name, 23); 
			}
	・カプセル化
		・メンバ
			private	   自分のクラスのみアクセス可
			なし	 	自分と同じパッケージに属するクラス
			protected  自分と同じパッケージに属するか、自分を景勝した子クラス
			public     全てのクラス
		・クラス
			なし　　　　 自分と同じパッケージに属するクラス(クラス名とソースファイル名は異なっていてOK。１つのソースファイルに複数の宣言をしてOK)
			public     全てのクラス
	
	・継承
		・定義
			class クラス名　extends 元となるクラス名 {
				親クラスとの差分メンバ
			}
		・継承不可(finalをつける)
			public final class String extends Object { ~ }
		・オーバーライド不可(finalをつける)
			public final void slip() {~}
		・メソッドの呼び出し
			基本的に子インスタンスのメソッドで対応しようとするが、明示的に親インスタンスのメソッド等にアクセスする方法
				super.フィールド名
				super.メソッド名
		・親クラスのコンストラクタ呼び出し
			super(引数); // ただしコンストラクタの最初の行しか記述できない
			もし記述しない場合、コンパイラによって自動的に上記の行が自動挿入される。
			
	・高度な継承
		・抽象クラス
			・抽象ソメッドを含むクラス宣言
				public abstract class Character {}
				       ````````
			・抽象メソッド宣言
				public abstract void attack(Matango m);
				　　　　````````
		・インターフェース
			・条件
				メソッドが全て抽象メソッドである
				フィールドを基本的に１つも持たない
				
			・宣言方法
				public interface Creature {
					void run();  // 「public abstract」を省略可能
				}
				
			・インターフェースの実装
				public class kyotoCleaningShop implements CleaningService {
					// 親インターフェースで未定だった各メソッドの内容をオーバーライドして確定させる
				}
				
				メリット① 同じインターフェースをimplementsする複数の子クラスたちに、共通のメソッド群を実装するよう強制できる
				メリット② あるクラスがインターフェースを実装していれば、少なくともそのインターフェースが定めたメソッドは持っていることが保証される
				
			・インターフェースによる多重継承
				public class PrincessHero implements Hero, Princess, Character {
				                          ````````````````````````````````````
				}
				
			・インターフェースの継承 (インターフェース同士はextendsを使う)
				public interface Human extends Character {
					void talk();
					void watch();
					void hear();
					// 更に親インターフェースからrun()を継承
				}
				
			・implementsとextendsの使い分け
				継承元　　　　　　継承先　　　　　　使用するキーワード　　継承元の数
				クラス　　　　　　クラス　　　　　　extends            1つ
				インターフェース　インターフェース　 extends            1つ以上
				インターフェース　クラス　　　　　　 implements         1つ以上
				
			・implementsとextendsを一緒に使う
				public class Fool extends Character implements Human {
					// Characterから継承したhpやgetName()などのメンバを継承している
					// Characterから継承した抽象メソッドのattack()を実装
					public void attack(Matango m){
						// 処理
					}
					// 更にHumanから継承した４つの抽象メソッドを実装
					public void talk() {```}
					public void watch() {```}
					public void hear() {```}
					public void run() {```}
					
			・デフォルト実装付きの抽象メソッドの宣言
				インターフェースが持てるメソッドは処理内容を持たない抽象メソッドに限らるが、defaultを使うと定義できる
					default 戻り値　メソッド名(引数) {
						処理のデフォルト実装
					}
					
	・多様性（ポリモーフィズム）
		あいまいなイメージ「あるものを、あえてざっくり捉える」ことで、様々なメリット享受しようという機能
		・定義方法
			character c = new SuperHero();
			　箱の型　　　　　　　　中身の型
			
		・特徴
			【箱の型】どのメソッドを「呼べるか」を決定　（この場合、Characterのメソッドのみ呼べる）
			【中身の型】メソッドを呼ばれたら、「どう動くか」を決定する　（この場合、呼ばれたらSuperHeroのメソッドの動きをする）
		
		・あいまいな型の箱へのインスタンスの代入
			上の例では元々はSuperHeroなのに、Characterの箱に入るため、Characterのメソッドしか呼べなくなる
			→SuperHeroに呼ばれた同名のメソッドがあれば、その振る舞いになる
		
		・途中で捉え方を変更する（キャストする）
			・安全にキャストできるか判定する
				変数　instanceof 型名
			例　if(c instanceof SuperHero){
					SuperHero h = (SuperHero) c; // cをSuperHeroと見なしてhに代入
					h.fly();
				}
			
		・利用方法
			同一視して、配列を利用する
			