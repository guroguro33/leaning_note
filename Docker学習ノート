Docker
		yumでDockerをインストール
			・ルートユーザーやルート権限で実行
			・「yum -y install docker」コマンドを実行
		
		デーモンの起動
			・「systemctl start docker」コマンドを入力
		サービスのスタート
			・「service docker start」コマンドを入力
				
		毎度起動するのは面倒なので、ブート時に自動起動する設定
			・「systemctl enable docker」を入力
			・「chkconfig docker on」を入力
			・systemctl	サービスの起動・停止・状態確認
			・chkconfig	OS起動時に起動するサービスの登録や削除など
		
		他の簡単なコマンド
			・「docker version」		バージョン確認
			・「docker system info」	実行環境の確認
			・「docker system df」		ディスク利用状況確認
		
		イメージのダウンロード
			・「docker pull」	必要なDockerイメージをDocker Hubからダウンロード
			・「docker pull nginx」	nginxのイメージをダウンロード
			
		ダウンロードしたイメージの確認
			・「docker image ls」	ホストマシン上のイメージ一覧取得
			重要な内容
				・REPOSITORY	リポジトリ、イメージの名前
				・IMAGE ID		イメージID。個々のイメージ識別に利用
		
		コンテナの生成・起動
			・「docker container run」コマンドを利用
			・「docker container run --name webserver -d -p 80:80 nginx」
			      コマンド本体　　　　　　コンテナ名指定　　　オプション　イメージ名
			
			オプションの意味
			・「-d」デタッチモードを表すオプション、バックグラウンドで起動させたい時につける
				　　このオプションがないと、他のサービスを同時に実行できない。
			・「-p」ポート番号の設定　ホストのポート番号とコンテナのポート番号を関連付ける
				　　「ホスト側番号:コンテナ側番号」で記述。80:80だと共にポート80番
			
			virtualboxのポート設定
			・設定→ネットワーク→高度→ポートフォワーディングでnginxだったら、「名前：http ホストポート:80 ゲストポート:80」と設定
			
		コンテナの停止と起動
			・停止「docker stop」コマンド
			・「docker stop webserver」	webserverが停止する
			・起動「docker start」コマンド
			・「docker start webserver」webserverが起動する
			
		コンテナの動作確認
			・「docker container ls」
	
		dockerでLinuxを動かす
			・「docker image pull ubuntu:18.04」コマンドを実行　
			・タグの「:18.04」を省略すると最新版がDL
			
			コンテナの生成・起動
				・「docker container run --name my-ubuntu -it -d ubuntu:18.04」
				
				オプションの意味
				・「-it」	-iオプションと-tオプションを合わせたもの。これをつけるとターミナルでコンテナを実行できる
					・-i	標準入力を開く
					・-t	ttyを割り当てる	
						ttyとは？標準入出力となっている端末デバイス（ディスプレイとキーボード）
					
			動作の確認①
				・「docker exec」	稼働中のコンテナに接続
				・「docker exec -it my-ubuntu /bin/echo "hello"」
				
			動作の確認②
				・「docker container attach」	稼働中のコンテナに接続
				・「docker container attach my-ubuntu」
				・終了時はexitコマンド。しかし終了するとubuntuが停止するため、「docker start」コマンドを実行すること


		コンテナの削除
			・コンテナを停止してから削除する
			・「docker container rm コンテナ名」コマンドを実行
			
		イメージの削除
			・「docker image rm イメージ名」コマンドを実行
			
		不要なイメージとコンテナを一括削除
			・「docker system prune」	不要なイメージ・コンテナを一括削除
			・「docker image prune」	不要なイメージのみ削除
			・「docker container prune」不要なコンテナのみ削除
			・docker run イメージ名とすると、無名のコンテナが残ってしまうので、イメージ削除に-fが必要
			・しかしdocker container pruneをすると無名のコンテナが消えるので、その後、docker image rmでイメージが普通に削除できる
		
		コンテナとしてOSを起動する場合（イメージ取得してコンテナを作って起動まで一発）
			・「docker run -it OS名:タグ」	pullしてrunしてattachまで一発
				コンテナ名は自動生成される。
		
		起動しているOSから抜ける場合
			・exit もしくは　CTRL＋c	コンテナが終了してしまう
			・CTRL+pとCTRL+q		  コンテナが終了しない
				コンテナを終了せず停止すると、再びattachで再接続可能
		
		Dockerfileの基本構造
			・構文「コマンド名　パラメータ」
			・コマンド名	アルファベットの大文字で記述
				・「FROM」	ベースイメージの設定
				・「CMD」	docker run時に実行されるコマンド
				
		イメージの生成
			・ホームディレクトリに戻ってDockerイメージを作成	
			・カレントディレクトリの場合は再度にスペースと.をつける
			・「docker image build -t hello-example myhello」
			                          イメージ名　　ディレクトリ名
		
		Dockerイメージをアップロード
			・Dockerイメージのタグづけ
				・「Docker image tag」コマンドでイメージにタグづけ
				・Docker Hubに登録するには以下の形式にする必要がある
					・<Docker Hubのユーザー名/イメージ名:タグ名>
				・「docker image tag hello-example kameda05/hello-ex:1.0」
				                  ベースのイメージ名　ユーザー名 イメージ名 タグ名
				・docker image lsで確認すると表示される
			
			・Docker Hubへのログイン
				・「docker login」と入力
					・UsernameとPasswordを入力
			
			・ログイン後、Dockerイメージのアップロード
				・「docker image push」コマンド
				・「docker image push kameda05/hello-ex:1.0」
				                     ユーザー名　イメージ名　タグ
									 
			・Docker Hubからログアウト
				・「Docker logout」でログアウト
				
		Dockerイメージを作成
			①取得
				・「docker image pull centos:latest」	latest・・・最新版（省略可能）
				・「docker image ls」で確認
				
			②コンテナの生成と起動
				・「docker container run --name centos_ex -it -d centos:latest」
												コンテナ名の氏名　　イメージ名
												
			③今回はファイルを作成し、コンテナにコピー
				・「echo "Hello CentOS" > centos.txt」 でリダイレクトしてtxtを作成
				・「cat centos.txt」でファイルの中身を確認
				・「docker container cp」	コンテナ間、およびホストOSとコンテナ間のデータコピー可能
				・「docker container cp centos.txt centos_ex:/root」	ホストのcentos.txtをcentos_exの/rootにコピー
									　　コピー元の名前　コンテナ名　パス名
				・「docker exec centos_ex ls /root」	lsやcatコマンドでファイルを確認
								コンテナの名前　コマンド
									  
			④イメージの作成
				・「docker container commit」
					「docker container commit -a "toru" centos_ex t02f447f/centos-ex-img:1.0」
											　作者名(-a)　コンテナ名　ユーザー名　イメージ名　　 タグ名
											
			⑤イメージのアップロード
				・docker Hubにログインして、pushして、ログアウトする
				・「docker image push t02f447f/centos-ex-img:1.0」
						             ユーザー名　イメージ名　　　タグ
									 
		・ローカルにイメージを保存、読み込み
			・「docker image save」	ローカルにイメージ保存
				・「docker image save -o (名前) .tar (イメージ名)」
					例「docker image save -o hello-ex.tar t02f447f/hello-ex」
						
			・「docker image load」	ローカルのデータを読み込み
				・やる前にimageを一旦削除「docker image rm」
				・「docker image load -i (名前) .tar」で読み込み
					例「docker image load -i hello-ex.tar」
			
		・エクスポート（コンテナを保存）、インポート（イメージとして読み込む）
			・「docker container export」	ローカルにコンテナ保存
			・「docker container import」	保存したコンテナをイメージとして読み込む
				・saveとloadはイメージの保存と読み込み
				・exportとimportはコンテナ保存し、そこからイメージ生成
					
				・「docker container export (コンテナ名) > (ファイル名).tar」	コンテナを生成してから保存すること
					1. docker container run --name centos-con -it -d t02f447f/centos-ex-img:1.0
					2. docker container export centos-con > centos-con.tar
					
				・「cat (ファイル).tar | docker image import - (イメージ名)」
					1. cat centos-con.tar | docker image import - t02f447f/centos-ex-img:1.1
					
		・Docker toolboxの導入
			・参考　https://docs.docker.jp/mac/step_one.html
			
	・docker-machineについて
		・使用可能なマシンの確認	
			・Docker-machine　ls
				Docker Toolboxの場合はvirtualboxの仮想マシンとなる。おいおいAWSなどクラウドなどになる。
				
		・新たなマシンの追加
			・docker-machine create --driver [ドライバ名] [マシン名]
			例　docker-machine create --driver virtualbox sample
			
		・環境変数の確認
			・docker-machine env [マシン名]	（マシン名は省略可能）
		
		・マシン状態の確認
			・docker-machine status [マシン名]
				Running・・・実行中　Stopped・・・停止中　Saved・・・保存されている
				
		・マシンの停止
			・docker-machine stop [マシン名]
			
		・マシンの起動（IPアドレスが変わる可能性あり）
			・docker-machine start [マシン名]
		
		・マシンの再起動（IPアドレスが変わる可能性あり）
			・docker-machine restart [マシン名]
				・Savedの場合はこれを使うと良い
		
		・マシンの削除
			・docker-machine rm [マシン名]
				
		・マシンにssh接続
			・docker-machine ssh [マシン名]
			・終了はexit
			
	・Dockerfileに記述するコマンド
		
		・ONBUILD関数	次のビルド時に実行するコマンドをイメージ内に設定
					　 自身のDockerfileから生成したイメージをベースとした別のDockerfileを
					ビルドする時に実行される
					
			・使用例　ONBUILD ADD webusite.tar var/www/html (Dockerfile内)
		
		・ADDコマンド	イメージにホスト上のファイルやディレクトリを追加
					　リモートファイルのダウンロード、アーカイブの解凍
					
		・圧縮ファイル（tar）の作り方
			・tar cvf website.tar .
					ファイル名　　カレントディレクトリ
		
		・ENTRYPOINTコマンド	docker container run を実行時に実行されるコマンド
			・ENTRUPOINT [コマンド]	Exec形式
			・ENTRYPOINT コマンド	Shell形式
			
			例	ENTRYPOINT ["nginx", "-g", "daemon off;"]	Exec形式
				ENTRYPOINT nginx -g 'daemon off;' 			Shell形式 
				
		・ENVコマンド　Dockerfile内で環境変数を設定する場合に用いる
			・ENV [key] [value]
			・ENV [key]=[value]
			
			例	ENV name "Taro"
				ENV addr="Tokyo"
				
		・WORKDIRコマンド	Dockerfileに書かれた以下の命令を実行するための作業ディレクトリを指定
						   RUN CMD ENTRYPOINT COPY ADD
			・WORKDIR [作業ディレクトリのパス]
			・例　WORKDIR /first
			
		・USERコマンド　	イメージの実行やDockerfileの以下の命令を実行するためのユーザーを指定
						  RUN CMD ENTRYPOINT
			・USER ユーザー名/UID
			・例　USER "Taro"
			
		・LABELコマンド	　　イメージにバージョン情報・作者情報・コメント等をもたせる
			・LABEL <キー名>=<値>
			・例 LABEL title="webapp"
		
		・ARGコマンド		Dockerfile内の変数の設定
			・ARG <名前>[=デフォルト値]
			・例　ARG name="Hanako"
			
		・SHELLコマンド		デフォルトシェルの設定
			・SHELL ["シェルのパス", "パラメータ"]
			・SHELL ["/bin/bash", "-c"]
			
		・VOLUMEコマンド	イメージにボリュームを割り当てる
			・VOLUME ["/マウントポイント"]
			・例　VOLUME ["/var/log"]
			
	・BusyBox	標準UNIXコマンドで重要な多数のプログラムを単一の実行ファイルに詰め込んで提供
		・特徴　軽い（１MB程度)。組み込みLinuxで使われる。Dockerで使い捨てされることが多い
		・内部構成
			・アプレット	コマンド機能に相当
			・libbb		　 アプレット間で使う関数を定義したもの
		・使ってみる
			「docker run -it --rm busybox」	--rmをつけると終了時に自動的にコンテナが消える
			
	・ボリューム
		・ボリュームの作成	docker volume create [ボリューム名]
		・ボリュームの一覧	docker volume ls
		・ボリュームの詳細	docker volume inspect [ボリューム名]
		・ボリュームの削除	docker volume rm [ボリューム名]
		・ボリュームの掃除	docker volume prune 
		
		・コンテナにボリュームをマウント （コンテナを消してもボリュームは残る）
			1.Dockerfileに記述する
			2.Dockerコマンドで作成したボリュームをマウントする
				docker run -v [ボリューム名]:[ディレクトリ名]
				例　1.ボリュームを作る
					docker volume create vol2
					2.OSにマウントする
					docker run -v vol2:/tmp/volume --rm -it ubuntu
					              ボリューム　マウント先　使い捨て　OSのイメージ
								  